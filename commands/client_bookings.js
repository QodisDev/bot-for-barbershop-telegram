const { bookings } = require('../utils/db');
const { Markup } = require('telegraf');
const { escapeHtml } = require('../utils/helpers');

module.exports = {
    command_name: 'mybookings',
    allowed_users: [],
    async execute(ctx, bot) {
        const userId = ctx.from.id;

        await new Promise(resolve => {
            bookings.remove({
                userId,
                date: { $lt: new Date() }
            }, { multi: true }, resolve);
        });

        const userBookings = await new Promise(resolve => {
            bookings.find({ userId })
                .sort({ date: 1 })
                .limit(3)
                .exec((err, docs) => resolve(err ? [] : docs || []));
        });

        if (!userBookings.length) {
            return ctx.replyWithHTML('üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π\n\n‚ÑπÔ∏è –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å: /book');
        }

        const message = userBookings.map((booking, index) => {
            const date = new Date(booking.date);
            return `${index + 1}. <b>${escapeHtml(booking.service)}</b>\n` +
                `üìÖ ${date.toLocaleDateString('ru-RU', { weekday: 'short', day: 'numeric', month: 'long' })}\n` +
                `‚è∞ ${booking.time}\n` +
                `üìû ${escapeHtml(booking.phone)}`;
        }).join('\n\n');

        await ctx.replyWithHTML(
            `‚ú® <b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏</b> (–º–∞–∫—Å–∏–º—É–º 3):\n\n${message}`,
            Markup.inlineKeyboard([
                ...userBookings.map(booking => [
                    Markup.button.callback(
                        `‚ùå –û—Ç–º–µ–Ω–∏—Ç—å ${new Date(booking.date).toLocaleDateString('ru-RU', { day: 'numeric', month: 'short' })} ${booking.time}`,
                        `cancel_${booking._id}`
                    )
                ]),
                [Markup.button.callback('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', 'mybookings')]
            ])
        );

        bot.action(/cancel_(.+)/, async (ctx) => {
            try {
                const bookingId = ctx.match[1];
                console.log(`–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ ID: ${bookingId}`);

                const numRemoved = await bookings.remove({ _id: bookingId }, { multi: false });
                console.log(`–£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${numRemoved}`);

                if (numRemoved === 0) {
                    console.error('–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ —É–¥–∞–ª–µ–Ω–∞');
                    return ctx.answerCbQuery('‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', { show_alert: true });
                }

                await ctx.answerCbQuery('‚úÖ –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞');
                await ctx.deleteMessage();
                await this.execute(ctx, bot);
            } catch (err) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏:', err);
                await ctx.answerCbQuery('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏', { show_alert: true });
            }
        });


    }
};
