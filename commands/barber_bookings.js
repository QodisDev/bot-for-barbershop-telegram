const { bookings } = require('../utils/db');
const { Markup } = require('telegraf');
const config = require('../config.json');
const { escapeHtml, formatRussianDate } = require('../utils/helpers');

module.exports = {
    command_name: 'allbookings',
    allowed_users: config.barbers,
    async execute(ctx, bot) {
        try {

            if (!bookings || typeof bookings.find !== 'function') {
                console.error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î');
                return ctx.replyWithHTML('‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</b>');
            }

            const page = Math.max(1, ctx.session.bookingPage || 1);
            const perPage = 5;
            const now = new Date();

            const allDocs = await new Promise(resolve => {
                bookings.find({})
                    .sort({ date: 1 })
                    .exec((err, docs) => resolve(err ? [] : docs || []));
            });

            const validBookings = allDocs.filter(doc => {
                if (doc.deleted || doc.$$deleted) return false;
                const bookingDate = doc.date instanceof Date ? doc.date : new Date(doc.date);
                return bookingDate > now;
            });

            const totalPages = Math.max(1, Math.ceil(validBookings.length / perPage));
            const currentPage = Math.min(page, totalPages);
            const currentBookings = validBookings.slice(
                (currentPage - 1) * perPage,
                currentPage * perPage
            );

            const formatBooking = (booking) => {
                const bookingDate = new Date(booking.date);
                return [
                    `üìÖ <b>${formatRussianDate(bookingDate)}</b> –≤ ${escapeHtml(booking.time)}`,
                    `‚úÇÔ∏è ${escapeHtml(booking.service)}`,
                    `üë§ ${escapeHtml(booking.name)} ‚îÇ üìû <code>${escapeHtml(booking.phone)}</code>`,
                    '‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ'
                ].join('\n');
            };

            const message = [
                `üìä <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏</b> (${validBookings.length} –≤—Å–µ–≥–æ, —Å—Ç—Ä. ${currentPage}/${totalPages}):`,
                ...currentBookings.map(formatBooking)
            ].join('\n\n');

            const keyboard = [
                ...currentBookings.map(booking => [
                    Markup.button.callback(
                        `‚ùå –û—Ç–º–µ–Ω–∏—Ç—å ${formatRussianDate(new Date(booking.date), true)} ${escapeHtml(booking.time)}`,
                        `barber_cancel_${escapeHtml(booking._id.toString())}`
                    )
                ]),
                [
                    Markup.button.callback(
                        '‚óÄÔ∏è –ù–∞–∑–∞–¥',
                        currentPage > 1 ? 'bookings_prev' : 'noop',
                        currentPage <= 1
                    ),
                    Markup.button.callback(
                        `${currentPage}/${totalPages}`,
                        'noop'
                    ),
                    Markup.button.callback(
                        '–í–ø–µ—Ä—ë–¥ ‚ñ∂Ô∏è',
                        currentPage < totalPages ? 'bookings_next' : 'noop',
                        currentPage >= totalPages
                    )
                ]
            ];

            const replyOptions = {
                parse_mode: 'HTML',
                reply_markup: { inline_keyboard: keyboard },
                disable_web_page_preview: true,
                disable_notification: true
            };

            if (ctx.callbackQuery) {
                await ctx.editMessageText(message, replyOptions);
                await ctx.answerCbQuery();
            } else {
                await ctx.replyWithHTML(message, replyOptions);
            }

            ctx.session.bookingPage = currentPage;

        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –≤ allbookings:', err);
            const errorMessage = ctx.callbackQuery
                ? '‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π'
                : '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–ø–∏—Å–µ–π';
            await (ctx.callbackQuery ? ctx.answerCbQuery : ctx.replyWithHTML).call(ctx, errorMessage);
        }
    }
};
